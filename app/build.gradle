plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id("jacoco") // Add this
}

android {
    namespace 'com.android.galleryapp'
    compileSdk 33

    defaultConfig {
        applicationId "com.android.galleryapp"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        packagingOptions {
            jniLibs {
                useLegacyPackaging = true
            }
        }
    }

    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.0'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            pickFirsts.add('META-INF/LICENSE.md')
            pickFirsts.add('META-INF/LICENSE-notice.md')
        }
    }
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == "androidx.emoji2") {
            details.useVersion "1.3.0"
        }

        if (details.requested.group == "org.jetbrains.kotlin") {
            details.useVersion "1.7.10"
        }
    }
}

dependencies {

    // Core and Lifecycle dependencies
    implementation "androidx.core:core-ktx:1.8.0"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation "androidx.activity:activity-compose:1.3.1"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.3.0"

    // Jetpack Compose dependencies
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"

    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.navigation:navigation-compose:2.5.3" // Compatible with Compose

    // Hilt dependencies
    implementation 'com.google.dagger:hilt-android:2.44' // Compatible with Compose and Hilt
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
    kapt "com.google.dagger:hilt-compiler:2.44"

    // Coil for Compose
    implementation 'io.coil-kt:coil-compose:2.2.0' // Compatible with Compose version


    implementation 'androidx.emoji2:emoji2:1.3.0' // Compatible with SDK 33

    // Core testing framework
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.5.4" // Ensure latest version
    debugImplementation "androidx.compose.ui:ui-test-manifest:1.5.4"

    //Additional testing libraries
    androidTestImplementation 'org.mockito:mockito-core:4.8.0'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0'

    testImplementation "io.mockk:mockk:1.13.3"
    androidTestImplementation 'io.mockk:mockk-android:1.13.3'


    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.8.0' // Mocking library
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.0.0' // For Kotlin-specific mockito functions
    testImplementation 'androidx.arch.core:core-testing:2.1.0' // For LiveData and Flow testing
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0' // For testing coroutines

}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest' // Ensure tests run before generating coverage

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            '**/databinding/**/*.*',
            '**/android/databinding/**/*.*',
            '**/androidx/databinding/**/*.*',
            '**/hilt_aggregated_deps/**/*.*',
            '**/dagger/hilt/internal/**/*.*',
            '**/com/example/generated/**/*.*'
    ]

    def debugTree = fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilter
    )

    sourceDirectories.setFrom(files(android.sourceSets.main.java.srcDirs))
    classDirectories.setFrom(files(debugTree))
    executionData.setFrom(files("$buildDir/jacoco/testDebugUnitTest.exec"))
}